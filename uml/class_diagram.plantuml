@startuml class_diagram

abstract Food {
    # id: Integer
    # name: String
    # category: String
    # discount: Float
    # price: Integer

    + modifyName(String name): Food
    + modifyCategory(String category): Food
    + modifyDiscount(Float discount): Food
    + modifyPrice(Integer price): Food
    + getName(): String
    + getType(): String
    + getDiscount(): Float
    + getPrice(): Integer
    + cost(): Long
}

class Combo {
    - array_dish: ArrayList<Dish>
    - quantity: ArrayList<Integer>

    + addDish(Dish dish, int amount): Combo
    + removeDish(int index): Combo
    + modifyAmount(int index): Combo
}

class Menu << Singleton >> {
    - instance: Menu
    - list: ArrayList<Food>

    - Menu()
    + getInstance(): Menu
    + createDish(): Menu
    + createCombo(): Menu
    + modifyDiscount(String category, Float discount): Menu
    + getFood(int index): Food
}

class Order {
    - list: ArrayList<Food>
    - quantity: ArrayList<Food>
    - date_time: LocalDateTime
    - note: String

    + addOrder(Food food): Order
    + removeOrder(int index): Order
    + increaseQuantity(int index): Order
    + decreaseQuantity(int index): Order
    + modifyNote(String note): Order
    + calcOrder(): Long
}

class Revenue << Singleton >> {
    - revenue: Revenue
    - date_time: String[]
    - type: String[]
    - name: String[]
    - amount: int[]
    - revenue: int[]

    - Revenue()
    + getInstanceRevenue(): Revenue
    + deleteRevenue(): void
    + totalRevenue(String date): int
}

class OperatorCost << Singleton >> {
    - operator_cost: OperatorCost
    - date_time: String[]
    - type: String[]
    - name: String[]
    - cost: int[]

    - OperatorCost()
    + getInstanceOperatorCost(): OperatorCost
    + addOperatorCost(String date_time, String type, String name, int cost): void
    + deleteOperatorCost(int index): void
    + saveOperatorCost(String path): void
    + modifyDateTime(int index, String date_time): void
    + modifyType(int index, String type): void
    + modifyName(int index, String name): void
    + modifyCost(int index, int cost): void
    + totalOperatorCost(String date): int
}

class GoodsCost << Singleton >> {
    - goods_cost: GoodsCost
    - date_time: String[]
    - type: String[]
    - name: String[]
    - amount: int[]
    - unit: String[]
    - cost: int[]

    - GoodsCost()
    + getGoodsCostInstance(): GoodsCost
    + addGoodsCost(String date_time, String type, String name, int amount, String unit, int cost): void
    + deleteGoodsCost(int index): void
    + saveGoodsCost(String path): void
    + modifyDateTime(int index, String date_time): void
    + modifyType(int index, String type): void
    + modifyName(int index, String name): void
    + modifyAmount(int index, int cost): void
    + modifyUnit(int index, String unit): void
    + modifyCost(int index, int cost): void
    + totalGoodsCost(String date): int
}

class Income << Singleton >> {
    - income: Income

    - Income()
    + getInstanceIncome(): Income
    + calcIncome(String date): int
}

class Dish {
    - specification
}

Combo --|> Food: extends
Dish --|> Food: extends
Dish  "1..*" --o "1..*" Combo
Order "1..*" o-- "1..*" Food
Menu "1" o-- "1..*" Food
Revenue --> Income
OperatorCost --> Income
GoodsCost --> Income

class GUI{

}

Order "1..*" --o "1" GUI
Menu "1" --o "1" GUI
OperatorCost "1" --o "1" GUI
GoodsCost "1" --o "1" GUI
Revenue "1" --o "1" GUI
Income "1" --o "1" GUI



@enduml
