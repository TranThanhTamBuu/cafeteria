@startuml class_diagram

abstract Food {
    # id: Integer
    # name: String
    # category: String
    # discount: Float
    # price: Integer

    + modifyName(String name): Food
    + modifyCategory(String category): Food
    + modifyDiscount(Float discount): Food
    + modifyPrice(Integer price): Food
    + getName(): String
    + getType(): String
    + getDiscount(): Float
    + getPrice(): Integer
    + cost(): Long
}

class Combo {
    - array_dish: ArrayList<Dish>
    - quantity: ArrayList<Integer>

    + addDish(Dish dish, int amount): Combo
    + removeDish(int index): Combo
    + modifyAmount(int index): Combo
}

class Menu << Singleton >> {
    - instance: Menu
    - list: ArrayList<Food>

    - Menu()
    + getInstance(): Menu
    + createDish(): Menu
    + createCombo(): Menu
    + modifyDiscount(String category, Float discount): Menu
    + getFood(int index): Food
}

class Order {
    - list: ArrayList<Food>
    - quantity: ArrayList<Food>
    - date_time: LocalDateTime
    - note: String

    + addOrder(Food food): Order
    + removeOrder(int index): Order
    + increaseQuantity(int index): Order
    + decreaseQuantity(int index): Order
    + modifyNote(String note): Order
    + calcOrder(): Long
}

class Revenue << Singleton >> {
    - revenue: Revenue
    - date_time: String[]
    - type: String[]
    - name: String[]
    - amount: int[]
    - revenue: int[]

    - Revenue()
    + getInstanceRevenue(): Revenue
    + deleteRevenue(): void
    + totalRevenue(String date): int
}

class Income << Singleton >> {
    - income: Income

    - Income()
    + getInstanceIncome(): Income
    + calcIncome(String date): int
}

class Cost {
    # id: Integer
    # type: Character
    # date: LocalDate
    # quantity: Float
    # unitId: Integer
    # totalAmount: Integer

    + modifyType(Character type): Cost
    + modifyDate(LocalDate date): Cost
    + modifyDescription(String description): Cost
    + modifyQuantity(Float quantity): Cost
    + modifyUnit(Integer unitID): Cost
    + modifyCostAmount(Integer totalAmount): Cost
    + getID(): Integer
    + getType(): Character
    + getDate(): LocalDate
    + getDescription(): String
    + getQuantity(): Float
    + getUnitID(): Integer
    + getTotalAmount(): Integer
}

class ManagementCost << Singleton >> {
    - ManagementCost()
    + getInstance(): ManagementCost
    + readCost(): ArrayList<Cost>
    + writeCost(Cost newCost): void
}

class Unit {
    # id: Integer
    # name: String

    + modifyName(String name): UnitID
    + getID(): Integer
    + getName(): String
}

class Dish {
    - specification
}


Combo --|> Food: extends
Dish --|> Food: extends
Dish  "1..*" -o "1..*" Combo
Order "1..*" o- "1..*" Food
Food "1..*" --o "1" Menu
Revenue --> Income
ManagementCost --> Income

class GUI{

}

Unit "1" -* "1..*" Cost
Cost "1..*" --* "1" ManagementCost
Order "1..*" -o "1" GUI
Menu "1" --o "1" GUI
ManagementCost "1" --o "1" GUI
Revenue "1" --o "1" GUI
Income "1" --o "1" GUI



@enduml
